// Code generated by MockGen. DO NOT EDIT.
// Source: internal\usecase\TaxiFares.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITaxeFares is a mock of ITaxeFares interface.
type MockITaxeFares struct {
	ctrl     *gomock.Controller
	recorder *MockITaxeFaresMockRecorder
}

// MockITaxeFaresMockRecorder is the mock recorder for MockITaxeFares.
type MockITaxeFaresMockRecorder struct {
	mock *MockITaxeFares
}

// NewMockITaxeFares creates a new mock instance.
func NewMockITaxeFares(ctrl *gomock.Controller) *MockITaxeFares {
	mock := &MockITaxeFares{ctrl: ctrl}
	mock.recorder = &MockITaxeFaresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaxeFares) EXPECT() *MockITaxeFaresMockRecorder {
	return m.recorder
}

// CalculateFare mocks base method.
func (m *MockITaxeFares) CalculateFare(traveledDistance float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateFare", traveledDistance)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateFare indicates an expected call of CalculateFare.
func (mr *MockITaxeFaresMockRecorder) CalculateFare(traveledDistance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateFare", reflect.TypeOf((*MockITaxeFares)(nil).CalculateFare), traveledDistance)
}
